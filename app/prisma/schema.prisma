// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum AuthProvider {
  EMAIL
  GOOGLE
  GITHUB
}

enum SolutionStatus {
  ACTIVE
  PENDING
  INACTIVE
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String?
  password      String?      // Hashed password for email auth
  role          UserRole     @default(USER)
  authProvider  AuthProvider @default(EMAIL)
  authProviderId String?     // External provider ID
  emailVerified DateTime?
  image         String?      // Profile image URL
  solutions     Solution[]
  reviews       Review[]
  sessions      Session[]    // Added for database sessions
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  lastLogin     DateTime?
  isActive      Boolean      @default(true)
  metadata      Json?        // Additional user metadata
  
  @@index([email])
  @@index([role])
}

// Added for NextAuth database sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Added for email verification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Solution {
  id            String         @id @default(cuid())
  title         String
  description   String
  version       String         @default("1.0.0")
  isPublished   Boolean        @default(false)
  author        User           @relation(fields: [authorId], references: [id])
  authorId      String
  tags          String[]
  resources     Resource[]
  reviews       Review[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  publishedAt   DateTime?
  
  // Move commonly queried fields out of metadata
  category      String         // No longer optional
  provider      String         // No longer optional
  launchUrl     String         // No longer optional
  sourceCodeUrl String?        // GitHub repository URL (optional)
  tokenCost     Int           @default(0)
  rating        Float         @default(0)
  totalVotes    Int           @default(0)
  upvotes       Int           @default(0)
  downvotes     Int           @default(0)
  status        SolutionStatus @default(PENDING)
  imageUrl      String?       // Made optional to test fallback
  
  // Structured metadata for additional fields
  metadata      Json?         // Type-safe via Zod schema

  // Improve indexing for common queries
  @@index([category])
  @@index([provider])
  @@index([status])
  @@index([tokenCost])
  @@index([rating])
  @@index([authorId])
  @@index([isPublished])
  @@index([createdAt])
  
  // Compound indexes for common query patterns
  @@index([isPublished, category])
  @@index([isPublished, provider])
  @@index([isPublished, status])
}

model Resource {
  id          String    @id @default(cuid())
  name        String
  type        String    // File type or resource category
  url         String    // Storage URL or reference
  solution    Solution  @relation(fields: [solutionId], references: [id])
  solutionId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  metadata    Json?     // Additional resource metadata
  
  @@index([solutionId])
  @@index([type])
}

model Review {
  id          String    @id @default(cuid())
  rating      Int       @default(0)
  comment     String
  solution    Solution  @relation(fields: [solutionId], references: [id])
  solutionId  String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isVerified  Boolean   @default(false)
  metadata    Json?     // Additional review metadata
  
  @@index([solutionId])
  @@index([authorId])
  @@index([rating])
  @@index([createdAt])
}

// Audit logging for compliance monitoring
model AuditLog {
  id          String    @id @default(cuid())
  action      String    // Type of action performed
  entityType  String    // Type of entity affected (User, Solution, etc.)
  entityId    String    // ID of the affected entity
  userId      String    // User who performed the action
  metadata    Json?     // Additional audit information
  createdAt   DateTime  @default(now())
  
  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
}