// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum AuthProvider {
  EMAIL
  GOOGLE
  GITHUB
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String?
  password      String?      // Hashed password for email auth
  role          UserRole    @default(USER)
  authProvider  AuthProvider @default(EMAIL)
  authProviderId String?     // External provider ID
  emailVerified DateTime?
  image         String?      // Profile image URL
  solutions     Solution[]
  reviews       Review[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  lastLogin     DateTime?
  isActive      Boolean     @default(true)
  metadata      Json?       // Additional user metadata
  
  @@index([email])
  @@index([role])
}

model Solution {
  id            String     @id @default(cuid())
  title         String
  description   String
  version       String     @default("1.0.0")
  isPublished   Boolean    @default(false)
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  tags          String[]
  resources     Resource[]
  reviews       Review[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  publishedAt   DateTime?
  
  // Keep existing fields as optional
  category      String?
  provider      String?
  launchUrl     String?
  sourceCodeUrl String?    // GitHub repository URL
  tokenCost     Int?
  rating        Float?
  status        String?
  
  // Add metadata as optional first
  metadata      Json?
  imageUrl      String?    // Solution image URL
  
  @@index([authorId])
  @@index([isPublished])
}

model Resource {
  id          String    @id @default(cuid())
  name        String
  type        String    // File type or resource category
  url         String    // Storage URL or reference
  solution    Solution  @relation(fields: [solutionId], references: [id])
  solutionId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([solutionId])
}

model Review {
  id          String    @id @default(cuid())
  rating      Int       @default(0)
  comment     String
  solution    Solution  @relation(fields: [solutionId], references: [id])
  solutionId  String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isVerified  Boolean   @default(false)
  
  @@index([solutionId])
  @@index([authorId])
}

// Audit logging for compliance monitoring
model AuditLog {
  id          String    @id @default(cuid())
  action      String    // Type of action performed
  entityType  String    // Type of entity affected (User, Solution, etc.)
  entityId    String    // ID of the affected entity
  userId      String    // User who performed the action
  metadata    Json?     // Additional audit information
  createdAt   DateTime  @default(now())
  
  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
}