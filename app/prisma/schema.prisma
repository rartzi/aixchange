generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  name           String?
  password       String?
  role           UserRole     @default(USER)
  authProvider   AuthProvider @default(EMAIL)
  authProviderId String?
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  lastLogin      DateTime?
  isActive       Boolean      @default(true)
  metadata       Json?
  reviews        Review[]
  sessions       Session[]
  solutions      Solution[]
  // New event-related fields
  createdEvents    Event[]          @relation("EventCreator")
  participatedEvents EventParticipant[]

  @@index([email])
  @@index([role])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Solution {
  id            String         @id @default(cuid())
  title         String
  description   String
  version       String         @default("1.0.0")
  isPublished   Boolean        @default(false)
  authorId      String
  tags          String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  publishedAt   DateTime?
  metadata      Json?
  category      String
  imageUrl      String?
  launchUrl     String
  provider      String
  rating        Float          @default(0)
  sourceCodeUrl String?
  status        SolutionStatus @default(PENDING)
  tokenCost     Int            @default(0)
  downvotes     Int            @default(0)
  totalVotes    Int            @default(0)
  upvotes       Int            @default(0)
  // New event-related field
  eventId       String?
  event         Event?         @relation(fields: [eventId], references: [id])
  
  resources     Resource[]
  reviews       Review[]
  author        User           @relation(fields: [authorId], references: [id])

  @@index([category])
  @@index([provider])
  @@index([status])
  @@index([tokenCost])
  @@index([rating])
  @@index([authorId])
  @@index([isPublished])
  @@index([createdAt])
  @@index([isPublished, category])
  @@index([isPublished, provider])
  @@index([isPublished, status])
  @@index([eventId])
}

model Resource {
  id         String   @id @default(cuid())
  name       String
  type       String
  url        String
  solutionId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  metadata   Json?
  solution   Solution @relation(fields: [solutionId], references: [id])

  @@index([solutionId])
  @@index([type])
}

model Review {
  id         String   @id @default(cuid())
  rating     Int      @default(0)
  comment    String
  solutionId String
  authorId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isVerified Boolean  @default(false)
  metadata   Json?
  author     User     @relation(fields: [authorId], references: [id])
  solution   Solution @relation(fields: [solutionId], references: [id])

  @@index([solutionId])
  @@index([authorId])
  @@index([rating])
  @@index([createdAt])
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String
  userId     String
  metadata   Json?
  createdAt  DateTime @default(now())

  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
}

// New Event-related models
model Event {
  id              String       @id @default(cuid())
  title           String
  description     String
  shortDescription String
  startDate       DateTime
  endDate         DateTime
  status          EventStatus  @default(UPCOMING)
  type            EventType    @default(HACKATHON)
  imageUrl        String?
  bannerUrl       String?
  prizes          Json?
  rules           String
  maxParticipants Int?
  isPublic        Boolean      @default(true)
  isPromoted      Boolean      @default(false)
  viewCount       Int          @default(0)
  participantCount Int         @default(0)
  submissionCount Int          @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  createdById     String

  // Relations
  createdBy       User         @relation("EventCreator", fields: [createdById], references: [id])
  participants    EventParticipant[]
  solutions       Solution[]

  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([createdById])
}

model EventParticipant {
  id              String    @id @default(cuid())
  userId          String
  eventId         String
  role            ParticipantRole @default(PARTICIPANT)
  joinedAt        DateTime @default(now())

  // Relations
  user            User      @relation(fields: [userId], references: [id])
  event           Event     @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum AuthProvider {
  EMAIL
  GOOGLE
  GITHUB
}

enum SolutionStatus {
  ACTIVE
  PENDING
  INACTIVE
}

enum EventStatus {
  DRAFT
  UPCOMING
  ACTIVE
  VOTING
  COMPLETED
  ARCHIVED
}

enum EventType {
  HACKATHON
  CHALLENGE
  COMPETITION
  WORKSHOP
}

enum ParticipantRole {
  PARTICIPANT
  MENTOR
  JUDGE
  ORGANIZER
}
