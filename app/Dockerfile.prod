# Use Node.js LTS as base image
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    curl \
    wget \
    git \
    python3 \
    make \
    g++

# Install dependencies based on the preferred package manager
COPY package.json package-lock.json ./
RUN npm ci

# Generate Prisma Client
COPY prisma ./prisma
RUN npx prisma generate

# Production image
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1
ENV PATH /app/node_modules/.bin:$PATH

# Install production dependencies
RUN apk add --no-cache \
    curl \
    wget \
    postgresql-client \
    tini

# Copy dependency manifests and install dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY package.json package-lock.json ./

# Copy application code
COPY . .

# Generate Prisma Client
RUN npx prisma generate

# Build the application
RUN npm run build

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs && \
    mkdir -p /app/uploads /app/public/external-images/solutions && \
    chown -R nextjs:nodejs /app && \
    chmod -R 755 /app/public/external-images

# Copy and setup startup script
COPY deploy/start.sh /app/start.sh
RUN chmod +x /app/start.sh

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Add health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=60s --retries=5 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Use tini as init system
ENTRYPOINT ["/sbin/tini", "--"]

# Start the application
CMD ["/bin/sh", "/app/start.sh"]